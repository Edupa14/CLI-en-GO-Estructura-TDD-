package mssql_repository

import (
	"gitlab.com/ns-desarrollo-web/erp/ns-core-service"
	db "gitlab.com/ns-desarrollo-web/erp/ns-core-service/services/databases"
	"%RUTAMANTENEDOR%/domain/model"
	"%RUTAMANTENEDOR%/domain/repository"
)

type empaqueMssqlRepository struct {
	db db.Sql
}

func (p *empaqueMssqlRepository) Listar(client *ns.Context, start int, length int, search string, order string) (entidad []model.EmpaqueModel, total int64, filtered int64, err error) {
	rs, err := p.db.Run(client, `
		EXEC [NS_MAINTAINER_LIST]
				@idempresa = '',
				@columns = 'id,codigo,nombre,nombre_corto,id_tipo,impresion_auto,habilitado,fechacreacion,transaction_uid,id_cliente',
				@table = 'TMEMPAQUE',
				@start = $1,
				@length = $2,
				@search = $3,
				@order = '',
				@advanced_filter = '',
				@default_filter = 'codigo, nombre'
	`, start, length, search)
	if err != nil {
		return
	}

	err = rs.Unmarshal(&entidad)
	if err != nil {
		return
	}

	total, filtered = rs.Total, rs.Filtered

	return
}

func (e *empaqueMssqlRepository) Crear(ctx *ns.Context, modelo *model.EmpaqueModel) (id int64, err error) {
	values := []interface{}{
		modelo.Codigo,
		modelo.Nombre,
		modelo.NombreCorto,
		modelo.IdTipo,
		modelo.ImpresionAuto,
		modelo.TaraEmpaque,
		modelo.CapaEmpaque,
		modelo.CapaExpo,
		modelo.UsoAvicola,
		modelo.TotalUnid,
		modelo.EsParticionable,
		modelo.PesoMinimo,
		modelo.PesoMaximo,
		modelo.IdCliente,
	}

	lastInsertId, err := e.db.QueryWithLastID(ctx, `
	   INSERT INTO TMEMPAQUE(
			[codigo],
		 	[nombre],
			[nombre_corto],
			[id_tipo],
			[impresion_auto],
		 	[tara_empaque],
			[capa_empaque],
			[capa_expo],
		 	[uso_avicola],
			[total_unid],
			[es_particionable],
		 	[peso_minimo],
			[peso_maximo],
			[id_cliente]
   		)`, values...)

	return lastInsertId, err
}

func (e *empaqueMssqlRepository) Actualizar(ctx *ns.Context, id int64, modelo *model.EmpaqueModel) (err error) {
	pst, err := e.db.Prepare(ctx, "UPDATE TMEMPAQUE SET codigo = $1, nombre = $2, nombre_corto = $3,"+
		"id_tipo = $4, impresion_auto = $5, tara_empaque = $6, capa_empaque = $7, capa_expo = $8, uso_avicola = $9, " +
		"total_unid = $10, es_particionable = $11, peso_minimo = $12, peso_maximo = $13, id_cliente = $14 where id = $15")
	if err != nil {
		return
	}

	defer pst.Close()
	_, err = pst.Exec(
			modelo.Codigo,
			modelo.Nombre,
			modelo.NombreCorto,
			modelo.IdTipo,
			modelo.ImpresionAuto,
			modelo.TaraEmpaque,
			modelo.CapaEmpaque,
			modelo.CapaExpo,
			modelo.UsoAvicola,
			modelo.TotalUnid,
			modelo.EsParticionable,
			modelo.PesoMinimo,
			modelo.PesoMaximo,
			modelo.IdCliente,
			id)

	if err != nil {
		return
	}
	return nil
}

func (e *empaqueMssqlRepository) Eliminar(ctx *ns.Context, id int64) (err error) {
	pst, err := e.db.Prepare(ctx, "delete TMEMPAQUE where id = $1")
	if err != nil {
		return
	}
	defer pst.Close()
	_, err = pst.Exec(id)
	if err != nil {
		return
	}
	return nil
}

func (e *empaqueMssqlRepository) BuscarPorId(ctx *ns.Context, id int64) (*model.EmpaqueModel, error) {
	var a model.EmpaqueModel
	err := e.db.Get(ctx, &a, "SELECT * FROM TMEMPAQUE WHERE id = $1", id)
	return &a, err
}

func (e *empaqueMssqlRepository) Buscar(ctx *ns.Context, search, advancedSearch string, isColumns bool) (modelo []model.EmpaqueModel, err error) {

	if isColumns {
		var m model.EmpaqueModel
		cols := utils.ObtenerCampos(m.EmpaqueEnity)
		modelo = append(modelo, model.EmpaqueModel{
			Cols: cols,
		})
		return
	}

	columns := `id,
				codigo,
				nombre,
				nombre_corto,
				id_tipo,
				impresion_auto,
				tara_empaque,
				capa_empaque,
				capa_expo,
				uso_avicola,
				total_unid,
				es_particionable,
				peso_minimo,
				peso_maximo,
				habilitado,
				fechacreacion,
				transaction_uid,
				id_cliente`
	err = e.db.Select(ctx, &modelo, `
		EXEC NS_GETDATA_F
			@idempresa = '',
			@columns = $1,
			@table = 'TMEMPAQUE',
			@search = $2,
			@limit = $3,
 			@id_filter = '',
			@default_filter = 'codigo,nombre',
			@advanced_filter = $4`, columns, search, 10, advancedSearch)

	if err != nil {
		return
	}
	return
}

func (e *empaqueMssqlRepository) HabilitarDeshabilitar(ctx *ns.Context, id int64, status bool) (err error) {
	pst, err := e.db.Prepare(ctx, `
		UPDATE TMEMPAQUE
		SET habilitado = $1
		WHERE id = $2
	`)

	if err != nil {
		return
	}

	defer pst.Close()

	_, err = pst.Exec(status, id)

	if err != nil {
		return
	}
	return
}

func NewEmpaqueRepository(db db.Sql) repository.EmpaqueRepository {
	return &empaqueMssqlRepository{db: db}
}
